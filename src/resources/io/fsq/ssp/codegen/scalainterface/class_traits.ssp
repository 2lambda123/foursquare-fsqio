<%
  // Copyright 2017 Foursquare Labs Inc. All Rights Reserved.
  import _root_.io.fsq.spindle.codegen.runtime.StructLike
%>
<%@ val cls: StructLike %>
<%@ val clsContainer: String %>

<% val brace = if (!cls.primaryKeyField.isDefined) "{" else "" %>
trait ${cls.name} extends Object
#for (pkField <- cls.primaryKeyField)
    with _root_.io.fsq.spindle.runtime.HasPrimaryKey[${pkField.renderType.text}, ${cls.name}]
#end
    with _root_.scala.math.Ordered[${cls.name}]
    with org.apache.thrift.TBase[${cls.name}, ${cls.name}._Fields] {

#for (field <- cls.fields)
<% render(field.renderType.fieldDefTemplate, Map("field" -> field)) %>
#end

<% render("class_traits_mutablecopy.ssp", Map("cls" -> cls)) %>

<% render("class_traits_mutable.ssp", Map("cls" -> cls)) %>

<% render("class_traits_tobuilder.ssp", Map("cls" -> cls)) %>

<% render("class_traits_deepmergecopy.ssp", Map("cls" -> cls)) %>

#if (cls.isException)
  def toException: ${clsContainer}
#end
}

<% render("class_traits_mutablet.ssp", Map("cls" -> cls)) %>

#if (cls.generateProxy)
<% render("class_traits_proxyt.ssp", Map("cls" -> cls)) %>
<% render("class_traits_mutable_proxyt.ssp", Map("cls" -> cls)) %>
#end

#if (cls.generateLiftAdapter)
<% render("class_traits_lift_adapter.ssp", Map("cls" -> cls)) %>
<% render("class_traits_lift_adapter_mutable.ssp", Map("cls" -> cls)) %>
#end
