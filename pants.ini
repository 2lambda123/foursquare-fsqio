# Pants config for Foursquare Fsq.io

[GLOBAL]
print_exception_stacktrace: True
enable_v2_engine: False

# The pants_version value is only used in Fsq.io, although checked on each run everywhere.
pants_version: 1.3.1rc1

verify_config: True
kill_nailguns: True

backend_packages: +[
    'pants.contrib.go',
    'pants.contrib.node',
    'fsqio.pants.buildgen.core',
    'fsqio.pants.buildgen.jvm',
    'fsqio.pants.buildgen.python',
    'fsqio.pants.ivy',
    'fsqio.pants.mypy',
    'fsqio.pants.node',
    'fsqio.pants.publish',
    'fsqio.pants.rpmbuild',
    'fsqio.pants.spindle',
    'fsqio.pants.tags',
    'fsqio.pants.tracing',
  ]

# Mixed into all cache keys. Bump this to invalidate all existing artifacts.
# We are using timestamps for cache keys. To bump it run `date +%Y-%m-%d:%H:%M:%S` and paste in the output.
cache_key_gen_version: '2017-10-31:00:05:15'

# The build_ignore_patterns uses .gitignore syntax.
build_ignore: [
    '.*/',
    '/.pants.d',
    '.git',
    '*.orig',
    '*.rej',
    '.local_artifact_cache',
    '.pants.bootstrap',
    '.pants.d',
    '.pantsenv',
    '.pids',
    '.pvenvs',
    '.wheelhouse',
    '/api',
    '/dependencies',
    '/dist',
    '/etc',
    '/log',
    '/mongo-testdb',
    '/out',
    '/scripts',
    '/target',
    '/yourkit',
  ]


[DEFAULT]
pants_workdir: %(buildroot)s/.pants.d
pants_supportdir: %(buildroot)s/build-support
pants_distdir: %(buildroot)s/dist


basic_opts: [
  '-Duser.timezone=UTC',
  '-Dfile.encoding=UTF-8',
  '-Djava.awt.headless=true',
  '-XX:+AggressiveOpts',
  '-XX:+UseCompressedOops',
  '-Xss4096k',
  '-server',
  '-Dzinc.analysis.cache.limit=1000',
  '-Xmx8g',
  ]

fsqio_test_opts: [
  '-Duser.timezone=UTC',
  '-Dfile.encoding=UTF-8',
  '-Djava.awt.headless=true',
  '-XX:+AggressiveOpts',
  '-XX:+UseCompressedOops',
  '-XX:ReservedCodeCacheSize=512m',
  '-Xss4096k',
  '-noverify',
  '-server',
  '-Dzinc.analysis.cache.limit=1000',
  '-Drun.mode=test',
  '-Dmongo.connectionsPerHost=10',
  '-Dmongo.threadsAllowedToBlockForConnectionMultiplier=10',
  '-Djava.security.manager',
  '-Djava.security.policy=%(buildroot)s/test/jvm/fsqio.tests.policy',
  '-Xmx6g',
  ]

debug_opts: [
  '-Xverify:none',
  '-Xdebug',
  '-Xnoagent',
  '-Djava.compiler=NONE',
  '-Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=y',
  ]

local_artifact_cache_path: %(buildroot)s/.local_artifact_cache/

local_artifact_caches: ["%(local_artifact_cache_path)s"]
all_artifact_caches: [
    "%(local_artifact_cache_path)s",
  ]


# Override these in each section, as appropriate, using the values above.
[cache]
read_from: []
write_to: []


[clean-all]
async: True


[reporting]
# This cuts down on the verbosity of pants output
# Comment out these lines to see warnings and other output
console_label_format: {
    'COMPILER' : 'SUPPRESS',
  }
console_tool_output_format: {
    'COMPILER' : 'SUPPRESS',
  }


[jvm-distributions]
minimum_version: 1.8.0
maximum_version: 1.8.999


[go-distribution]
version: 1.8


[jvm-platform]
default_platform: java8
platforms: {
    'java8': {'source': '8', 'target': '8', 'args': [] },
  }

[bundle.jvm]
use_basename_prefix: True

[cache.bundle.jvm]
read_from = %(local_artifact_caches)s
write_to = %(local_artifact_caches)s
max_entries_per_target: 3

[cache.bootstrap.bootstrap-jvm-tools]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s


[binaries]
# TODO(mateo): Remove once we consume Pants 1.2.1+
path_by_id:   {
  ('darwin', '16'): ['mac', '10.12'],
  ('darwin', '17'): ['mac', '10.13']
  }


[goals]
logdir: /tmp/%(user)s/goals


[ivy]
# NOTE(mateo): These settings are also hardcoded in a python mixin, a hack we needed in order to test Pants tasks
# that invoke JVM tools. Changes to Ivy config often requires migrating the mixin, look under test/python/**/pants.
ivy_profile: %(pants_supportdir)s/ivy/fsqio/fsqio.ivy.xml
ivy_settings: %(pants_supportdir)s/ivy/fsqio/fsqio.ivysettings.xml
cache_dir: %(homedir)s/.pom2


[thrift-binary]
supportdir: bin/thrift
version: 0.9.1


[node-distribution]
version: 6.9.5


[gen.spindle]
scala_ssp_template: src/resources/io/fsq/ssp/codegen/scala
java_ssp_template: src/resources/io/fsq/ssp/codegen/javagen
spindle_codegen_binary: src/jvm/io/fsq/spindle/codegen:spindle
runtime_dependency: [
    '3rdparty:finagle',
    '3rdparty:thrift',
    'src/jvm/io/fsq/spindle/runtime',
  ]
write_annotations_json: true


[ide-gen.spindle-stubs]
scala_ssp_template: src/resources/io/fsq/ssp/codegen/scalainterface
spindle_codegen_binary: src/jvm/io/fsq/spindle/codegen:spindle
runtime_dependency: [
    '3rdparty:finagle',
    '3rdparty:thrift',
    'src/jvm/io/fsq/spindle/runtime',
  ]
# NOTE(mateo): This is the Fsq.io path, should work with internal users to migrate to this and deprecate surplus path.
stub_output_path: %(buildroot)s/scripts/fsqio/IntelliJ/spindle_stubs/
skip=False

[cache.gen.spindle]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s


[build-spindle]
spindle_codegen_binary: src/jvm/io/fsq/spindle/codegen:spindle


[cache.build-spindle]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s
max_entries_per_target: 3

[lint.scalafmt]
skip=True


[compile.zinc]
# If you are changing any compile options for zinc or java you MUST bump the cache key!
worker_count: 4
# Unneeded since we use buildgen.
unused_deps: ignore
#TODO DENORM:
jvm_options: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dzinc.analysis.cache.limit=1000',
    '-XX:+UseG1GC',
    '-XX:+PrintGCDetails',
    '-XX:+PrintGCTimeStamps',
    '-Xmx8g',
  ]

warning_args: []
no_warning_args: [
    '-S-nowarn',
  ]

# TODO: Write to caches (or at least local cache) once editing-while-building doesn't cause issues.
args: [
    '-S-encoding', '-SUTF-8',
    '-S-deprecation',
    '-S-unchecked',
    '-S-feature',
    '-S-Xfatal-warnings',
    '-S-g:vars',
    '-S-language:existentials',
    '-S-language:implicitConversions',
    '-S-language:reflectiveCalls',
    '-S-language:postfixOps',
    '-S-language:higherKinds',
  ]


[cache.compile.zinc]
read_from = %(all_artifact_caches)s
write_to = []


[jvm]
debug_args: %(debug_opts)s
options: ["-Xmx6g"]


[jvm.repl.scala]
options: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dmongo.connectionsPerHost=4',
    '-Dmongo.threadsAllowedToBlockForConnectionMultiplier=10',
    '-noverify',
    '-XX:ReservedCodeCacheSize=512m',
    '-Dscala.usejavacp=true',
    '-DconsoleMode=true',
    '-Xmx6g',
  ]


[jvm.run.jvm]
options: %(basic_opts)s


[jvm.test.junit]
options: %(fsqio_test_opts)s

[test.junit]
output_mode: FAILURE_ONLY
default_concurrency: PARALLEL_CLASSES_AND_METHODS
use_experimental_runner: True


[jar-tool]
jvm_options: ['-Xms2g','-Xmx2g', '-Djava.io.tmpdir=%(pants_workdir)s']


[jar-dependency-management]
default_target: 3rdparty:fsqio-management


[publish.jar]
ivy_settings: %(pants_supportdir)s/ivy/fsqio/fsqio.publish.ivysettings.xml
# This is a dummy repo and is unused by Foursquare.
repos = {
    'oss_sonatype_repo': {
      'resolver': 'oss.sonatype.org-publish',
      'confs': ['default', 'sources'],
      'auth': 'build-support:oss.sonatype.org'
    }
  }
restrict_push_branches: master
restrict_push_urls: git@github.com:foursquare/fsqio.git

[scala-platform]
version: custom
suffix_version: 2.11


[repl.scala]
main: ammonite.Main

[buildgen]
source_dirs: [
    'src',
    '3rdparty',
  ]

test_dirs: [
    'test',
  ]

target_whitelist: [
    'java_tests',
    'junit_tests',
    'python_library',
    'python_tests',
    'scala_library',
    'scala_record_library',
    'scalac_plugin',
    'spindle_thrift_library'
  ]

managed_dependency_aliases: [
    'jar_library',
    'python_library',
    'python_requirement_library',
    'scala_library',
    'scala_record_library',
  ]

buildgen_target_bags: [
    'src/thrift/io/fsq:all_thrift',
  ]


[buildgen.python]
fatal: True

first_party_packages = [
    'fsqio',
    'fsqio_test,'
  ]

ignored_prefixes: [
    'argparse',    # builtin, excluded because the 3rdparty version is installed transitively.
    'geojson',     # twofishes script in src/jvm.
    'lvm',         # linuxonly
    'shapely',     # twofishes script - requires c headers and not in virtualenv
  ]

third_party_map: {
    'gen': {
      'apache': {
        'aurora': '3rdparty/python:apache.aurora.thrift',
        'thermos': '3rdparty/python:apache.aurora.thermos',
        },
      },
    'pants': {
      'DEFAULT': '3rdparty/python:pantsbuild.pants',
      'contrib': {
        'node': '3rdparty/python:pantsbuild.pants.contrib.node',
        'go': '3rdparty/python:pantsbuild.pants.contrib.go',
      },
    },
    'pants_test': {
      'DEFAULT': '3rdparty/python:pantsbuild.pants.testinfra',
    },
    'github3': {
      'DEFAULT': '3rdparty/python:github3.py',
    },
    'py_zipkin': {
      'DEFAULT': '3rdparty/python:py-zipkin',
    },
  }


[tag]
# NOTE: This is overrided internally - for use with Fsq.io only.
by_prefix:  {
    '3rdparty': ['exempt'],
    'test': ['tests'],
    'verification': ['tests'],
    'src': ['dependencies_cannot_have:tests'],
    'src/jvm/io/fsq': ['opensource', 'dependencies_must_have:opensource', 'fscommon'],
    'src/resources/io/fsq': ['opensource', 'dependencies_must_have:opensource'],
    'src/thrift/io/fsq': ['opensource', 'dependencies_must_have:opensource', 'fscommon'],
    'test/jvm/io/fsq': ['opensource', 'dependencies_must_have:opensource'],
    'test/thrift/io/fsq': ['opensource', 'dependencies_must_have:opensource'],
  }

[cache.resolve.go]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s
